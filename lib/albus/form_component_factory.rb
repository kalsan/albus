module Albus
  module FormComponentFactory
    # Called by StepDefinition components, this returns an anonymous class suitable as
    # a form component for the step definition.
    def self.build_form_class_for(step_definition, custom_form_fields_block: nil)
      return Class.new(Compony::Components::Form) do
        # Store arguments into class instance variable for later retrieval
        @step_definition = step_definition
        def self.step_definition
          @step_definition
        end

        # The form component's setup
        setup do
          form_fields do
            div class: 'albus-form' do
              if custom_form_fields_block
                instance_exec(&custom_form_fields_block)
              else
                step_definition.fields.each_key do |name|
                  concat field(name, label: step_definition.cancancan_subject.human_attribute_name(name.to_sym))
                end
              end
              step_definition.initial_step_params&.each do |param_name| # this only applies to initial steps
                concat hidden_field_tag param_name, params[param_name]
              end
            end
          end
          schema_fields(*step_definition.fields.keys)

          # Form buttons (this overrides default buttons generated by compony's form)
          content :buttons do
            div class: 'albus-buttons' do
              if data.astep&.locked?
                # No buttons to be displayed within the form, as submission for locked steps is prohibited
              elsif data.astep&.completed?
                # <-> buttons that save when pressed
                concat save_form_button
                concat previous_step_form_button if data.astep.previous_step
                concat next_step_form_button if data.astep.next_step
              else
                # save draft button
                concat save_draft_form_button
                # all possible next step buttons
                step_definition.next_step_configs.each_value { |next_step_config| concat next_to_new_step_form_button(next_step_config) }
                concat finalize_form_button if step_definition.final_step?
              end
            end
          end
        end

        # Override for form input
        def field(name, *, **kwargs, &)
          kwargs = { as: self.class.step_definition.fields[name].rails_type, disabled: f.object.astep&.locked? }.merge(kwargs)
          super
        end
      end
    end
  end
end
